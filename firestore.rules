/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for tasks.
 *
 * Data Structure:
 * - All task data is nested under /users/{userId}/tasks/{taskId}, ensuring that each user's tasks are isolated.
 *
 * Key Security Decisions:
 * - Users can only access tasks they own. Listing tasks is allowed only for the owner.
 * - Data validation is relaxed in this prototyping phase to allow for rapid schema iteration. However, ownership is strictly enforced.
 * - The rules are designed to be auditable and maintainable, with complex logic abstracted into helper functions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-specific ownership for tasks. Only the owner can create, read, update, and delete tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User A creates a task under their own user ID: auth.uid == "userA"
     * @allow (get) - User A reads a task under their own user ID: auth.uid == "userA"
     * @allow (update) - User A updates a task under their own user ID: auth.uid == "userA"
     * @allow (delete) - User A deletes a task under their own user ID: auth.uid == "userA"
     * @deny (create) - User A tries to create a task under User B's user ID: auth.uid == "userA"
     * @deny (get) - User A tries to read a task under User B's user ID: auth.uid == "userA"
     * @deny (update) - User A tries to update a task under User B's user ID: auth.uid == "userA"
     * @deny (delete) - User A tries to delete a task under User B's user ID: auth.uid == "userA"
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/tasks/{taskId} {
      // Read permissions
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write permissions
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource based on the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}