/**
 * @fileoverview Firestore Security Rules for the task management application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for tasks nested under a specific artifact. Each user, identified by their Firebase Auth UID, has exclusive access to their own tasks.
 *
 * Data Structure:
 * - /artifacts/{appId}/users/{userId}/tasks/{taskId}: Stores individual task documents, nested under artifact and user identifiers.
 *
 * Key Security Decisions:
 * - User tasks are segregated under their respective /artifacts/{appId}/users/{userId}/tasks/{taskId} paths.
 * - Listing tasks is only allowed for the owner of the user path (QAPs compliance).
 * - The appId is a top-level parameter, grouping data by application instance.
 *
 * Denormalization for Authorization:
 * Not required. Path-based ownership is enforced.
 *
 * Structural Segregation:
 * All user-specific data is segregated under the /artifacts/{appId}/users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the provided userId matches the authenticated user's UID.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the userId matches the authenticated user's UID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the document exists.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the userId matches the authenticated user's UID and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces artifact and user ownership for task documents.
     * @path /artifacts/{appId}/users/{userId}/tasks/{taskId}
     * @allow (create) User 'A' with UID 'userA' can create a new task document under /artifacts/{appId}/users/userA/tasks/task123. The taskId can be any valid Firestore document ID.
     * @allow (get) User 'A' with UID 'userA' can retrieve a task document at /artifacts/{appId}/users/userA/tasks/task123.
     * @allow (list) User 'A' with UID 'userA' can list task documents under /artifacts/{appId}/users/userA/tasks.
     * @allow (update) User 'A' with UID 'userA' can update a task document at /artifacts/{appId}/users/userA/tasks/task123.
     * @allow (delete) User 'A' with UID 'userA' can delete a task document at /artifacts/{appId}/users/userA/tasks/task123.
     * @deny (create) User 'B' with UID 'userB' cannot create a task document under /artifacts/{appId}/users/userA/tasks/task123.
     * @deny (get) User 'B' with UID 'userB' cannot retrieve a task document at /artifacts/{appId}/users/userA/tasks/task123.
     * @deny (list) User 'B' with UID 'userB' cannot list task documents under /artifacts/{appId}/users/userA/tasks.
     * @deny (update) User 'B' with UID 'userB' cannot update a task document at /artifacts/{appId}/users/userA/tasks/task123.
     * @deny (delete) User 'B' with UID 'userB' cannot delete a task document at /artifacts/{appId}/users/userA/tasks/task123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /artifacts/{appId}/users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces artifact-level access.
     * @path /artifacts/{appId}
     * @allow (create) Any signed-in user can create under the artifacts collection. In this case it will not enforce that a user must create a new artifact.
     * @allow (get) Any signed-in user can retrieve artifacts.
     * @allow (list) Any signed-in user can list artifacts.
     * @allow (update) Only the owner can update an artifact.
     * @allow (delete) Only the owner can delete an artifact.
     * @deny (create) Non-signed in users cannot create a new artifact.
     * @deny (get) Non-signed in users cannot retrieve artifacts.
     * @deny (list) Non-signed in users cannot list artifacts.
     * @deny (update) Non-owners cannot update an artifact.
     * @deny (delete) Non-owners cannot delete an artifact.
     * @principle  Top-level collection access is restricted to authenticated users.
     */
    match /artifacts/{appId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}