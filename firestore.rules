/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for tasks, where each user has full control over their own task data, and isolates application instances using an artifact ID. Projects are publicly readable but only modifiable with valid authentication.
 * @data_structure
 *   - /artifacts/{appId}: Top-level collection for grouping data by application ID.
 *   - /artifacts/{appId}/users/{userId}/tasks/{taskId}: Subcollection under each user for storing their tasks.
 * @key_security_decisions
 *   - Tasks are owned by the user ID in the path; no other user can access them.
 *   - Listing tasks is allowed only for the owner.
 *   - Projects are publicly readable but require valid authentication for modification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @example isSignedIn() == true if request.auth != null
     * @example isSignedIn() == false if request.auth == null
     * @principle Requires authentication for certain actions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user IDs match, false otherwise.
     * @example isOwner("user123") == true if request.auth.uid == "user123"
     * @example isOwner("user456") == false if request.auth.uid == "user123"
     * @principle Enforces ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID and that resource exists.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user IDs match and the resource exists, false otherwise.
     * @example isExistingOwner("user123") == true if request.auth.uid == "user123" and resource exists
     * @example isExistingOwner("user456") == false if request.auth.uid == "user123"
     * @principle Enforces ownership and validates that the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Manages access to user-specific tasks.
     * @path /artifacts/{appId}/users/{userId}/tasks/{taskId}
     * @allow (create) User "user123" creates a task under /artifacts/app1/users/user123/tasks/task123 when authenticated as "user123".
     * @deny (create) User "user456" tries to create a task under /artifacts/app1/users/user123/tasks/task123; fails because they are not "user123".
     * @allow (get) User "user123" retrieves a task under /artifacts/app1/users/user123/tasks/task123 when authenticated as "user123".
     * @deny (get) User "user456" tries to retrieve a task under /artifacts/app1/users/user123/tasks/task123; fails because they are not "user123".
     * @principle Enforces document ownership for all operations.
     */
    match /artifacts/{appId}/users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == taskId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to the top-level projects collection.
     * @path /artifacts/{appId}
     * @allow (get) Any user can retrieve a project under /artifacts/app1.
     * @allow (list) Any user can list projects under /artifacts/app1.
     * @deny (create) An unauthenticated user attempts to create a project.
     * @allow (create) An authenticated user attempts to create a project.
     * @deny (update) An unauthenticated user attempts to update a project.
     * @allow (update) An authenticated user attempts to update a project.
     * @deny (delete) An unauthenticated user attempts to delete a project.
     * @allow (delete) An authenticated user attempts to delete a project.
     * @principle Allows public reads, but requires authentication for writes.
     */
    match /artifacts/{appId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}