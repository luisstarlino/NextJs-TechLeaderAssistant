/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for tasks and isolates data by application ID.
 *
 * Data Structure:
 * - /artifacts/{appId}: Top-level collection for application-specific data. Currently, the app uses a single, known `appId`.
 * - /artifacts/{appId}/users/{userId}/tasks/{taskId}: Tasks owned by a specific user.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the rules structure.
 * - All data is nested under user-specific paths, eliminating the need for complex authorization checks.
 * - Only the authenticated user can create, read, update, or delete their own tasks.
 * - Project at /artifacts/{appId} can be publicly read, but only the owner (server) can create/update/delete.
 *
 * Denormalization for Authorization:
 * - Not required, as path-based ownership eliminates the need for `get()` calls or role-based access control.
 *
 * Structural Segregation:
 * - User-specific tasks are stored in a private user subcollection, ensuring that listing tasks is secure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /artifacts/{appId}/users/{userId}/tasks/{taskId} path.
     * @path /artifacts/{appId}/users/{userId}/tasks/{taskId}
     * @allow (create) Authenticated user 'user_abc' can create a new task under /artifacts/app1/users/user_abc/tasks/task1 if request.auth.uid == 'user_abc'.
     * @allow (get) Authenticated user 'user_abc' can get a task under /artifacts/app1/users/user_abc/tasks/task1 if request.auth.uid == 'user_abc'.
     * @allow (list) Authenticated user 'user_abc' can list tasks under /artifacts/app1/users/user_abc/tasks.
     * @allow (update) Authenticated user 'user_abc' can update a task under /artifacts/app1/users/user_abc/tasks/task1 if request.auth.uid == 'user_abc'.
     * @allow (delete) Authenticated user 'user_abc' can delete a task under /artifacts/app1/users/user_abc/tasks/task1 if request.auth.uid == 'user_abc'.
     * @deny (create) Authenticated user 'user_xyz' cannot create a task under /artifacts/app1/users/user_abc/tasks/task1 because the user ID does not match.
     * @deny (get) Authenticated user 'user_xyz' cannot get a task under /artifacts/app1/users/user_abc/tasks/task1 because the user ID does not match.
     * @deny (update) Authenticated user 'user_xyz' cannot update a task under /artifacts/app1/users/user_abc/tasks/task1 because the user ID does not match.
     * @deny (delete) Authenticated user 'user_xyz' cannot delete a task under /artifacts/app1/users/user_abc/tasks/task1 because the user ID does not match.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /artifacts/{appId}/users/{userId}/tasks/{taskId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == taskId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

     /**
      * @description Rules for the /artifacts/{appId} path, allowing public reads but restricting writes to the server (owner).
      * @path /artifacts/{appId}
      * @allow (get, list) Any user (authenticated or not) can read projects.
      * @allow (create, update, delete) Only the server can create, update, or delete projects.
      * @deny (create) Unauthenticated user cannot create a project.
      * @deny (update) Unauthenticated user cannot update a project.
      * @deny (delete) Unauthenticated user cannot delete a project.
      * @principle Allows public read access but restricts write access to the owner (server).
      */
    match /artifacts/{appId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}