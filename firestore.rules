/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for tasks within a project, ensuring that only the authenticated user can access their own task data.
 *
 * Data Structure:
 * - /artifacts/{appId}/users/{userId}/tasks/{taskId}: Stores individual tasks, with the path enforcing ownership.
 * - /artifacts/{appId}: Top-level collection for application-wide data (currently only projects).
 *
 * Key Security Decisions:
 * - Tasks are strictly owned by the user ID in the path.
 * - User listing is enabled only for the user's own tasks.
 * - All writes must be authenticated.
 * - Data validation is relaxed to allow rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The path `/artifacts/{appId}/users/{userId}/tasks/{taskId}` itself acts as denormalization.
 *   The `userId` is embedded in the path, eliminating the need to store it in the task document and
 *   avoiding costly `get()` operations to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {bool} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to check for ownership.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /artifacts/{appId}/users/{userId}/tasks/{taskId} collection.
     * @path /artifacts/{appId}/users/{userId}/tasks/{taskId}
     * @allow (create) Authenticated user 'user_abc' can create a task under their own user ID path.
     *   request.auth.uid: 'user_abc', request.resource.data: { id: 'user_abc' }
     * @allow (get) Authenticated user 'user_abc' can read a task under their own user ID path.
     *   request.auth.uid: 'user_abc'
     * @allow (update) Authenticated user 'user_abc' can update a task under their own user ID path.
     *   request.auth.uid: 'user_abc'
     * @allow (delete) Authenticated user 'user_abc' can delete a task under their own user ID path.
     *   request.auth.uid: 'user_abc'
     * @deny (create) Authenticated user 'user_xyz' cannot create a task under another user's ID path.
     *   request.auth.uid: 'user_xyz', path: '/artifacts/app1/users/user_abc/tasks/task1'
     * @principle Enforces strict user ownership for all task data.
     */
    match /artifacts/{appId}/users/{userId}/tasks/{taskId} {
      // Read rules: Only the owner can read their tasks.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write rules: Only the owner can create, update, or delete their tasks.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == taskId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rules for the /artifacts/{appId} collection (projects).
     * @path /artifacts/{appId}
     * @allow (get) Any user can read project data.
     *   request.auth.uid: null
     * @allow (list) Any user can list project data.
     *   request.auth.uid: null
     * @deny (create) No one can create projects without authentication.
     *   request.auth.uid: null
     * @deny (update) No one can update projects without authentication.
     *   request.auth.uid: null
     * @deny (delete) No one can delete projects without authentication.
     *   request.auth.uid: null
     * @principle Allows public read access for projects, but requires authentication for writes.
     */
    match /artifacts/{appId} {
      // Anyone can read projects (public read).
      allow get: if true;
      allow list: if true;

      // Only authenticated users can write (TODO: Add more granular controls)
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}