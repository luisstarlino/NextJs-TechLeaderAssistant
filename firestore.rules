/**
 * @fileoverview Firestore Security Rules for the task management application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for tasks, where each user has exclusive access to their own tasks.
 *
 * Data Structure:
 * - `/artifacts/{appId}/users/{userId}/tasks/{taskId}`: Stores task data for a specific user.
 * - `/artifacts/{appId}`: Top-level collection for application-wide data.
 *
 * Key Security Decisions:
 * - Users can only list tasks under their own user ID.
 * - Data access is strictly limited to the authenticated user.
 * - Write operations must be performed by the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage tasks within their specific user ID.
     * @path /artifacts/{appId}/users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user creates a new task under their user ID.
     *   Request: { auth: { uid: 'user123' }, resource.data: { id: 'user123' } }
     * @allow (get) - Authenticated user reads a specific task under their user ID.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (list) - Authenticated user lists tasks under their user ID.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (update) - Authenticated user updates a task under their user ID.
     *   Request: { auth: { uid: 'user123' }, resource.data: { id: 'user123' } }
     * @allow (delete) - Authenticated user deletes a task under their user ID.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - Authenticated user attempts to create a task under a different user ID.
     *   Request: { auth: { uid: 'user123' }, resource.data: { id: 'user456' } }
     * @principle Enforces document ownership for all CRUD operations.
     */
    match /artifacts/{appId}/users/{userId}/tasks/{taskId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read-only access to the artifacts collection.
     * @path /artifacts/{appId}
     * @allow (get, list) - Any user can read the artifacts collection.
     *   Request: { auth: null }
     * @deny (create, update, delete) - No one can create, update, or delete artifacts.
     *   Request: { auth: { uid: 'user123' } }
     * @principle Provides public read access with restricted write access.
     */
    match /artifacts/{appId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}