/**
 * @file Firebase Security Rules for Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where each user can only access data under their own user ID.
 *
 * Data Structure:
 * Data is organized under /artifacts/{appId}/users/{userId}/tasks/{taskId} for tasks and /artifacts/{appId} for projects.
 *
 * Key Security Decisions:
 * - Tasks are strictly owned by the user ID in the path.
 * - Listing tasks is allowed only for the owner.
 * - Projects are publicly readable, but only the application can create them.
 *
 * Denormalization for Authorization:
 * Not required. Path-based ownership is enforced.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to project data for the specified application ID.
     * @path /artifacts/{appId}
     * @allow (get, list) if true
     * @allow (create) if false // TODO: Add application-level validation to allow create.
     * @deny (update, delete) always
     * @principle Public read, application-only create.
     */
    match /artifacts/{appId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add application-level validation to allow create.
      allow update, delete: if false;
    }

    /**
     * @description Manages user-specific task data.
     * @path /artifacts/{appId}/users/{userId}/tasks/{taskId}
     * @allow (create) User 'alice' (auth.uid: 'alice') can create a task under /artifacts/testapp/users/alice/tasks/task1.
     * @allow (get, list, update, delete) User 'alice' (auth.uid: 'alice') can access a task under /artifacts/testapp/users/alice/tasks/task1.
     * @deny (create, get, list, update, delete) User 'bob' (auth.uid: 'bob') cannot access a task under /artifacts/testapp/users/alice/tasks/task1.
     * @principle Enforces document ownership; only the user matching the {userId} can access the data.
     */
    match /artifacts/{appId}/users/{userId}/tasks/{taskId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isValidTaskCreateRequest(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isValidTaskCreateRequest(userId) {
      return isOwner(userId) && request.resource.data.id == userId;
    }
  }
}