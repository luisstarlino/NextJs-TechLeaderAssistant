/**
 * @fileoverview Firestore Security Rules for the task management application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for tasks nested under user-specific paths,
 * ensuring that only the authenticated user can access their own tasks. All read and write operations
 * are scoped to the user's unique ID, simplifying security logic and enhancing data privacy.
 * No listing of users is allowed.
 *
 * Data Structure:
 * - /artifacts/{appId}/users/{userId}/tasks/{taskId}: Stores individual task documents.
 * - /artifacts/{appId}: Stores project documents.
 *
 * Key Security Decisions:
 * - Tasks are secured by path-based ownership; only the user whose ID appears in the path
 *   can access the corresponding tasks.
 * - No user listing is permitted; this is a standard security practice.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the given userId matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /artifacts/{appId}/users/{userId}/tasks/{taskId} path.
     * @path /artifacts/{appId}/users/{userId}/tasks/{taskId}
     * @allow (create) Signed-in user can create a task under their own user ID.
     * @deny (create) User attempts to create a task under another user's ID.
     * @allow (get) Signed-in user can get a task under their own user ID.
     * @deny (get) User attempts to get a task under another user's ID.
     * @allow (list) Signed-in user can list tasks under their own user ID.
     * @deny (list) User attempts to list tasks under another user's ID.
     * @allow (update) Signed-in user can update a task under their own user ID.
     * @deny (update) User attempts to update a task under another user's ID.
     * @allow (delete) Signed-in user can delete a task under their own user ID.
     * @deny (delete) User attempts to delete a task under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /artifacts/{appId}/users/{userId}/tasks/{taskId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId) && request.resource.data.id == taskId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /artifacts/{appId} path.
     * @path /artifacts/{appId}
     */
    match /artifacts/{appId} {
      // Read rules
      allow get: if true;
      allow list: if true;

      // Write rules
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}